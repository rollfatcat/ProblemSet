// TLE version 卡在匹配Row間的關係建立
#include<iostream>
#include<vector>
#include<cstring>
using namespace std;

int len, numS=0;
int stateMap[1<<22]={};
vector<int> state;
vector<int> link[46370];
long DP[2][46370]={};
void DFS(int deep,int nowS){ // 產生單個Row的合法狀態(費波那契狀態列：F(22)=46368)
  if(deep==len){ stateMap[nowS]=numS++, state.push_back(nowS); return; }
  DFS(deep+1,nowS<<1);
  if(!(nowS&1))
    DFS(deep+1,(nowS<<1)|1);
}
void PairLink(int nowS,int preS,int nowI){ //建立關係對時用DFS對每個Column試著選擇看看
  if(nowI>=len){ link[ stateMap[preS>>(nowI-len)] ].push_back(stateMap[nowS>>(nowI-len)]); return; }
  PairLink(    nowS<<1,    preS<<1,nowI+1); // 這一個Column 兩個Row都不選 =>  跳到下一次選的 Column+1
  PairLink((nowS<<2)|2,    preS<<2,nowI+2), // 這一個Column 前一個Row選 => 跳到下一次選的 Column+2
  PairLink(    nowS<<2,(preS<<2)|2,nowI+2); // 這一個Column 這一個Row選 => 跳到下一次選的 Column+2
}
int main(){
  cin>>len;
  DFS(0,0);  // 產生單個Row的合法狀態
  PairLink(0,0,0);// 建立Row之間合法的連結關係
  long map[len][len];
  for(int i=0;i<len;i++)
    for(int j=0;j<len;j++)
      cin>>map[i][j];
  for(int i=0;i<state.size();i++)
    for(int nowS=state[i],pos; nowS; nowS^=pos)
      pos=nowS&-nowS, DP[0][i]+=map[0][__lg(pos)];
  for(int Row=1;Row<len;Row++){
    bool now=Row&1, pre=now^1;
    memset(DP[now],0,sizeof(DP[0]));
    for(int i=0;i<state.size();i++){
      for(int j=0;j<link[i].size();j++)
        DP[now][i]=max(DP[now][i],DP[pre][ link[i][j] ]);
      // 把這個Row的狀態和對應的位置上分數相加
      for(int nowS=state[i],pos; nowS; nowS^=pos)
        pos=nowS&-nowS, DP[now][i]+=map[Row][__lg(pos)];
    }
  }
  //
  long maxDP=0;
  for(int i=0;i<state.size();i++)
    maxDP=max(maxDP,DP[(len&1)^1][i]);
  cout<<maxDP<<endl;
}
/*
20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
// 1100
22
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
// 1452
*/