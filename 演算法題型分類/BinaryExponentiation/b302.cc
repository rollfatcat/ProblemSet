// 快速幂次法：先把2^P的矩陣存起來
#include<bits/stdc++.h>
using namespace std;

const int MOD=100000007;
long B[32][2][2]={ {{1,1},{1,0}} };
int main(){
  for(int i=1;i<=31;i++)
    B[i][0][0]=(B[i-1][0][0]*B[i-1][0][0]+B[i-1][0][1]*B[i-1][1][0])%MOD,
    B[i][0][1]=(B[i-1][0][0]*B[i-1][0][1]+B[i-1][0][1]*B[i-1][1][1])%MOD,
    B[i][1][0]=(B[i-1][1][0]*B[i-1][0][0]+B[i-1][1][0]*B[i-1][1][1])%MOD,
    B[i][1][1]=(B[i-1][1][0]*B[i-1][0][1]+B[i-1][1][1]*B[i-1][1][1])%MOD;

  int caseT, P;
  scanf("%d",&caseT);
  while(caseT--){
    scanf("%d",&P);
    long N[2][2]={{1,0},{}};
    for(int i=0; P;i++,P>>=1)
      if(P&1)
        N[1][0]=(B[i][0][0]*N[0][0]+B[i][0][1]*N[0][1])%MOD,
        N[1][1]=(B[i][1][0]*N[0][0]+B[i][1][1]*N[0][1])%MOD,
        N[0][0]=N[1][0],
        N[0][1]=N[1][1];
    printf("%ld\n",N[0][0]);
  }
}